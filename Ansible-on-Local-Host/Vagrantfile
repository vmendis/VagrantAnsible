# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|

  config.vm.box = "ubuntu/trusty64"
  config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port

  config.vm.network "forwarded_port", guest: 80, host: 8080
  config.vm.hostname = "coco"     # Change hostname accordingly
 
  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access

  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.33.99"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. 
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
     vb.memory = "512"
  end
  #

  # 1. Copy a local file to guest
  # config.vm.provision "file", source: "/file/name", destination: "/tmp/file"

  # 2. Enable provisioning with an inline shell script. 
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL

  # 3. Provision with a shell script stored in a file

  # config.vm.provision :shell, path: "bootstrap-mgmt.sh"


  config.vm.provision "ansible" do |ansible|
    ansible.playbook = "./playbook.yaml"
  end



  # 4. Ansible provisioning using ansible on the guset. NOTE: No ansible on the machine running vagrant up
  #
  #  config.vm.provision "ansible_local" do |ansible|
  #  playbook.yml must reside on the local machine
  #  ansible.playbook = "./playbook.yml"
  # end

  # Puppet provisioning
  # https://www.vagrantup.com/docs/provisioning/puppet_apply.html

  # puppet need to be INSTALLED in the guest vm. if not   22.Jan.2019
  # provision puppet according to the OS prior to this

  # By default, Vagrant will configure Puppet to look for manifests in the "manifests" 
  # folder relative to the project root, and will use the "default.pp" manifest as an 
  # entry-point. This means, if your directory tree looks like the one below, you can 
  # get started with Puppet with just that one line in your Vagrantfile.

  # .
  # |-- Vagrantfile
  # |-- manifests
  # |   |-- default.pp

  # config.vm.provision "puppet" do |puppet|
  # end


end
